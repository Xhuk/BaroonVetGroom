#!/usr/bin/env python3
"""
Windows Development Startup Script for Veterinary Clinic Management SaaS
This script sets up the development environment and starts the application.
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_requirements():
    """Check if required tools are installed"""
    required = {
        'node': 'Node.js is required. Install from https://nodejs.org/',
        'npm': 'npm is required. Usually comes with Node.js',
    }
    
    missing = []
    for tool, message in required.items():
        try:
            # Use different flag for npm on Windows
            flag = '--version' if tool == 'node' else '-v'
            result = subprocess.run([tool, flag], capture_output=True, text=True, check=False)
            
            if result.returncode == 0 and result.stdout.strip():
                version = result.stdout.strip().split('\n')[0]
                print(f"✅ {tool} is installed (version: {version})")
            else:
                print(f"❌ {message}")
                missing.append(tool)
        except FileNotFoundError:
            print(f"❌ {message}")
            missing.append(tool)
    
    if missing:
        print(f"\n❌ Missing required tools: {', '.join(missing)}")
        return False
    return True

def setup_environment():
    """Set up environment variables for Windows development"""
    env_vars = {
        'NODE_ENV': 'development',
        'PORT': '5000',
        'CORS_ORIGIN': 'http://localhost:5000',
    }
    
    # Load existing environment variables
    env_file = Path('.env')
    if env_file.exists():
        print("📄 Loading existing .env file...")
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    else:
        print("⚠️  No .env file found. Creating with defaults...")
        
    # Ensure DATABASE_URL is set
    if 'DATABASE_URL' not in env_vars:
        print("⚠️  DATABASE_URL not found in environment")
        supabase_url = input("Enter your Supabase DATABASE_URL (or press Enter to skip): ").strip()
        if supabase_url:
            env_vars['DATABASE_URL'] = supabase_url
    
    # Write .env file for Windows
    with open('.env', 'w') as f:
        f.write("# Veterinary Clinic SaaS - Windows Development Environment\n")
        f.write("# Generated by start.py\n\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print("✅ Environment configured for Windows development")
    return env_vars

def install_dependencies():
    """Install npm dependencies"""
    print("📦 Installing npm dependencies...")
    try:
        result = subprocess.run(['npm', 'install'], capture_output=True, text=True, check=True)
        print("✅ Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install dependencies: {e}")
        print(f"Error output: {e.stderr}")
        return False

def setup_database():
    """Set up database for development"""
    print("🗄️  Setting up database...")
    try:
        # Push database schema
        result = subprocess.run(['npx', 'drizzle-kit', 'push'], capture_output=True, text=True, check=True)
        print("✅ Database schema pushed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"⚠️  Database setup failed: {e}")
        print(f"Error: {e.stderr}")
        print("You may need to configure your DATABASE_URL properly")
        return False

def start_development_server():
    """Start the development server with proper environment"""
    print("🚀 Starting development server...")
    print("Server will be available at: http://localhost:5000")
    print("Press Ctrl+C to stop the server\n")
    
    try:
        # Use cross-env to ensure environment variables work on Windows
        result = subprocess.run([
            'npx', 'cross-env', 'NODE_ENV=development', 
            'npx', 'tsx', 'server/index.ts'
        ], check=True)
    except subprocess.CalledProcessError as e:
        print(f"❌ Server failed to start: {e}")
        return False
    except KeyboardInterrupt:
        print("\n🛑 Server stopped by user")
        return True

def main():
    """Main startup sequence"""
    print("🏥 Veterinary Clinic Management SaaS - Windows Development Setup")
    print("=" * 60)
    
    # Check requirements
    if not check_requirements():
        sys.exit(1)
    
    # Setup environment
    env_vars = setup_environment()
    
    # Install dependencies
    if not install_dependencies():
        sys.exit(1)
    
    # Setup database
    setup_database()
    
    # Start server
    start_development_server()

if __name__ == "__main__":
    main()