import { useState } from "react";
// --- FIX ---
// The build environment could not find the 'react-leaflet' and 'leaflet' packages.
// This fix changes the imports to use a CDN (Skypack) to load the libraries directly.
// This allows the code to run without needing a local 'npm install'.
import { MapContainer, TileLayer, Marker, Popup } from 'https://cdn.skypack.dev/react-leaflet';
import L from 'https://cdn.skypack.dev/leaflet';

// --- Mock Components for Standalone Example ---
// In your real app, you would import these from "@/components/ui/..."
const Card = ({ children }) => <div className="border rounded-lg bg-white shadow-sm">{children}</div>;
const CardHeader = ({ children }) => <div className="p-4 border-b">{children}</div>;
const CardTitle = ({ children, className }) => <h3 className={`font-semibold ${className}`}>{children}</h3>;
const CardContent = ({ children, className }) => <div className={`p-4 ${className}`}>{children}</div>;
const Button = ({ children, onClick, variant }) => <button onClick={onClick} className="px-4 py-2 border rounded-md bg-gray-100 hover:bg-gray-200">{children}</button>;
const Badge = ({ children, variant }) => <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200">{children}</span>;


// --- Leaflet Icon Fix for Vite/React ---
// This is a standard workaround to ensure marker icons appear correctly.
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});


export default function DemoMap() {
  const [currentTileServer, setCurrentTileServer] = useState(0);
  // The 'mapKey' is a clever trick to force React to completely re-render the 
  // MapContainer component when the tile server changes. This is the most
  // reliable way to switch base layers in react-leaflet.
  const [mapKey, setMapKey] = useState(0);

  // The API key is now a hardcoded constant. The previous method using 
  // 'import.meta.env' caused a compilation error in some environments.
  // For a real application, create a .env.local file and place your key there:
  // VITE_MAPTILER_API_KEY="YOUR_KEY_HERE"
  // Then you can use: const maptilerApiKey = import.meta.env.VITE_MAPTILER_API_KEY;
  const maptilerApiKey = "YOUR_MAPTILER_API_KEY_HERE"; // Replace with your actual key

  const tileServers = [
    {
      name: "CartoDB Positron",
      url: "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      maxZoom: 19,
      subdomains: ['a', 'b', 'c', 'd']
    },
    {
      name: "OpenStreetMap",
      url: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      maxZoom: 19
    },
    {
      name: "Esri World Imagery",
      url: "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
      attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',
      maxZoom: 19
    },
    {
      name: "MapTiler Streets v2",
      url: `https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=${maptilerApiKey}`,
      attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
      maxZoom: 19,
    },
  ];

  const switchTileServer = () => {
    const newIndex = (currentTileServer + 1) % tileServers.length;
    setCurrentTileServer(newIndex);
    setMapKey(prevKey => prevKey + 1); // Force re-render
    console.log(`Switching to ${tileServers[newIndex].name}`);
  };

  const currentServer = tileServers[currentTileServer];

  const testMarkers = [
    { id: 1, position: [24.8066, -107.3938], name: "Clínica Veterinaria" },
    { id: 2, position: [24.8166, -107.4038], name: "Las Flores" },
    { id: 3, position: [24.7966, -107.3838], name: "El Bosque" },
    { id: 4, position: [24.8266, -107.3738], name: "Villa Real" },
  ];

  return (
    <div className="min-h-screen bg-gray-50 p-4 font-sans">
      <div className="max-w-7xl mx-auto space-y-4">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-800">
            React-Leaflet Map Demo (Culiacán)
          </h1>
          <Button onClick={switchTileServer}>
            Switch Layer ({currentServer.name})
          </Button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
          <div className="lg:col-span-3">
            <Card>
              <CardContent className="p-0">
                <div style={{ height: '650px', width: '100%' }}>
                  <MapContainer
                    key={mapKey} // This key forces a re-mount when the server changes
                    center={[24.8066, -107.3938]}
                    zoom={13}
                    style={{ height: '100%', width: '100%' }}
                    className="rounded-lg"
                  >
                    <TileLayer
                      attribution={currentServer.attribution}
                      url={currentServer.url}
                      maxZoom={currentServer.maxZoom}
                      subdomains={currentServer.subdomains || 'abc'}
                    />
                    
                    {testMarkers.map((marker) => (
                      <Marker key={marker.id} position={marker.position}>
                        <Popup>
                          <div className="text-center">
                            <div className="font-semibold">{marker.name}</div>
                            <div className="text-xs text-gray-500">
                              {marker.position[0].toFixed(4)}, {marker.position[1].toFixed(4)}
                            </div>
                          </div>
                        </Popup>
                      </Marker>
                    ))}
                  </MapContainer>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">Current Tile Server</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <Badge>{currentServer.name}</Badge>
                <div className="text-xs text-gray-500 break-words" dangerouslySetInnerHTML={{ __html: `<b>Attribution:</b> ${currentServer.attribution}` }} />
                <div className="text-xs text-gray-500"><b>Map Key:</b> {mapKey}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">Markers</CardTitle>
              </CardHeader>
              <CardContent>
                <ul>
                  {testMarkers.map(m => <li key={m.id} className="text-sm py-1">{m.name}</li>)}
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}

